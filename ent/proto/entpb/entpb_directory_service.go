// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/JAORMX/fertilesoil/ent"
	directory "github.com/JAORMX/fertilesoil/ent/directory"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// DirectoryService implements DirectoryServiceServer
type DirectoryService struct {
	client *ent.Client
	UnimplementedDirectoryServiceServer
}

// NewDirectoryService returns a new DirectoryService
func NewDirectoryService(client *ent.Client) *DirectoryService {
	return &DirectoryService{
		client: client,
	}
}

// toProtoDirectory transforms the ent type to the pb type
func toProtoDirectory(e *ent.Directory) (*Directory, error) {
	v := &Directory{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	if e.DeletedAt != nil {
		deleted_at := timestamppb.New(*e.DeletedAt)
		v.DeletedAt = deleted_at
	}
	id := int64(e.ID)
	v.Id = id
	is_root := e.IsRoot
	v.IsRoot = is_root
	metadata := wrapperspb.String(e.Metadata)
	v.Metadata = metadata
	name := e.Name
	v.Name = name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	for _, edg := range e.Edges.Children {
		id := int64(edg.ID)
		v.Children = append(v.Children, &Directory{
			Id: id,
		})
	}
	if edg := e.Edges.Parent; edg != nil {
		id := int64(edg.ID)
		v.Parent = &Directory{
			Id: id,
		}
	}
	return v, nil
}

// toProtoDirectoryList transforms a list of ent type to a list of pb type
func toProtoDirectoryList(e []*ent.Directory) ([]*Directory, error) {
	var pbList []*Directory
	for _, entEntity := range e {
		pbEntity, err := toProtoDirectory(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements DirectoryServiceServer.Create
func (svc *DirectoryService) Create(ctx context.Context, req *CreateDirectoryRequest) (*Directory, error) {
	directory := req.GetDirectory()
	m, err := svc.createBuilder(directory)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDirectory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements DirectoryServiceServer.Get
func (svc *DirectoryService) Get(ctx context.Context, req *GetDirectoryRequest) (*Directory, error) {
	var (
		err error
		get *ent.Directory
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetDirectoryRequest_VIEW_UNSPECIFIED, GetDirectoryRequest_BASIC:
		get, err = svc.client.Directory.Get(ctx, id)
	case GetDirectoryRequest_WITH_EDGE_IDS:
		get, err = svc.client.Directory.Query().
			Where(directory.ID(id)).
			WithChildren(func(query *ent.DirectoryQuery) {
				query.Select(directory.FieldID)
			}).
			WithParent(func(query *ent.DirectoryQuery) {
				query.Select(directory.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoDirectory(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements DirectoryServiceServer.Update
func (svc *DirectoryService) Update(ctx context.Context, req *UpdateDirectoryRequest) (*Directory, error) {
	directory := req.GetDirectory()
	directoryID := int(directory.GetId())
	m := svc.client.Directory.UpdateOneID(directoryID)
	if directory.GetDeletedAt() != nil {
		directoryDeletedAt := runtime.ExtractTime(directory.GetDeletedAt())
		m.SetDeletedAt(directoryDeletedAt)
	}
	if directory.GetMetadata() != nil {
		directoryMetadata := directory.GetMetadata().GetValue()
		m.SetMetadata(directoryMetadata)
	}
	directoryName := directory.GetName()
	m.SetName(directoryName)
	directoryUpdatedAt := runtime.ExtractTime(directory.GetUpdatedAt())
	m.SetUpdatedAt(directoryUpdatedAt)
	for _, item := range directory.GetChildren() {
		children := int(item.GetId())
		m.AddChildIDs(children)
	}
	if directory.GetParent() != nil {
		directoryParent := int(directory.GetParent().GetId())
		m.SetParentID(directoryParent)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDirectory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements DirectoryServiceServer.Delete
func (svc *DirectoryService) Delete(ctx context.Context, req *DeleteDirectoryRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Directory.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements DirectoryServiceServer.List
func (svc *DirectoryService) List(ctx context.Context, req *ListDirectoryRequest) (*ListDirectoryResponse, error) {
	var (
		err      error
		entList  []*ent.Directory
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Directory.Query().
		Order(ent.Desc(directory.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(directory.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListDirectoryRequest_VIEW_UNSPECIFIED, ListDirectoryRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListDirectoryRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithChildren(func(query *ent.DirectoryQuery) {
				query.Select(directory.FieldID)
			}).
			WithParent(func(query *ent.DirectoryQuery) {
				query.Select(directory.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoDirectoryList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListDirectoryResponse{
			DirectoryList: protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *DirectoryService) createBuilder(directory *Directory) (*ent.DirectoryCreate, error) {
	m := svc.client.Directory.Create()
	directoryCreatedAt := runtime.ExtractTime(directory.GetCreatedAt())
	m.SetCreatedAt(directoryCreatedAt)
	if directory.GetDeletedAt() != nil {
		directoryDeletedAt := runtime.ExtractTime(directory.GetDeletedAt())
		m.SetDeletedAt(directoryDeletedAt)
	}
	directoryIsRoot := directory.GetIsRoot()
	m.SetIsRoot(directoryIsRoot)
	if directory.GetMetadata() != nil {
		directoryMetadata := directory.GetMetadata().GetValue()
		m.SetMetadata(directoryMetadata)
	}
	directoryName := directory.GetName()
	m.SetName(directoryName)
	directoryUpdatedAt := runtime.ExtractTime(directory.GetUpdatedAt())
	m.SetUpdatedAt(directoryUpdatedAt)
	for _, item := range directory.GetChildren() {
		children := int(item.GetId())
		m.AddChildIDs(children)
	}
	if directory.GetParent() != nil {
		directoryParent := int(directory.GetParent().GetId())
		m.SetParentID(directoryParent)
	}
	return m, nil
}
