package driver

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	v1 "github.com/JAORMX/fertilesoil/api/v1"
)

type APIDBTransformer struct {
	db *sql.DB
}

func NewAPIDBTransformer(db *sql.DB) *APIDBTransformer {
	return &APIDBTransformer{
		db: db,
	}
}

// CreateRoot creates a root directory.
// Root directories are directories that have no parent directory.
// ID is generated by the database, it will be ignored if given.
func (t *APIDBTransformer) CreateRoot(ctx context.Context, d *v1.Directory) (*v1.Directory, error) {
	if d.Parent != nil {
		return nil, ErrRootWithParentDirectory
	}

	if d.Metadata == nil {
		d.Metadata = v1.DirectoryMetadata{}
	}

	err := t.db.QueryRowContext(ctx,
		"INSERT INTO directories (name, metadata) VALUES ($1, $2) RETURNING id, created_at, updated_at",
		d.Name, d.Metadata).Scan(&d.ID, &d.CreatedAt, &d.UpdatedAt)
	if err != nil {
		return nil, fmt.Errorf("error inserting directory: %w", err)
	}

	return d, nil
}

func (t *APIDBTransformer) ListRoots(ctx context.Context) ([]v1.DirectoryID, error) {
	var roots []v1.DirectoryID

	rows, err := t.db.QueryContext(ctx, "SELECT id FROM directories WHERE parent_id IS NULL")
	if err != nil {
		return nil, fmt.Errorf("error querying directory: %w", err)
	}
	defer rows.Close()

	for rows.Next() {
		var did v1.DirectoryID
		err := rows.Scan(&did)
		if err != nil {
			return nil, fmt.Errorf("error scanning directory: %w", err)
		}
		roots = append(roots, did)
	}

	return roots, nil
}

func (t *APIDBTransformer) CreateDirectory(ctx context.Context, d *v1.Directory) (*v1.Directory, error) {
	if d.Parent == nil {
		return nil, ErrDirectoryWithoutParent
	}

	if d.Metadata == nil {
		d.Metadata = v1.DirectoryMetadata{}
	}

	err := t.db.QueryRowContext(ctx,
		"INSERT INTO directories (name, parent_id, metadata) VALUES ($1, $2, $3) RETURNING id, created_at, updated_at",
		d.Name, d.Parent.ID, d.Metadata).Scan(&d.ID, &d.CreatedAt, &d.UpdatedAt)
	if err != nil {
		return nil, fmt.Errorf("error inserting directory: %w", err)
	}

	return d, nil
}

// GetDirectoryByID returns a directory by its ID.
// Note that this call does not give out parent information
func (t *APIDBTransformer) GetDirectory(ctx context.Context, id v1.DirectoryID) (*v1.Directory, error) {
	var d v1.Directory
	err := t.db.QueryRowContext(ctx,
		"SELECT id, name, metadata, created_at, updated_at FROM directories WHERE id = $1",
		id).Scan(&d.ID, &d.Name, &d.Metadata, &d.CreatedAt, &d.UpdatedAt)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrDirectoryNotFound
		}
		return nil, fmt.Errorf("error querying directory: %w", err)
	}

	return &d, nil
}

func (t *APIDBTransformer) GetParents(ctx context.Context, child v1.DirectoryID) ([]v1.DirectoryID, error) {
	var parents []v1.DirectoryID

	// TODO(jaosorior): What's more efficient? A single recursive query or multiple queries?
	//                  Should we instead recurse in-code and do multiple queries?
	rows, err := t.db.QueryContext(ctx, `WITH RECURSIVE get_parents AS (
	SELECT id, parent_id FROM directories WHERE id = $1

	UNION

	SELECT d.id, d.parent_id FROM directories d
	INNER JOIN get_parents gp ON d.id = gp.parent_id
)
SELECT id FROM get_parents`, child)
	if err != nil {
		return nil, fmt.Errorf("error querying directory: %w", err)
	}
	defer rows.Close()

	for rows.Next() {
		var did v1.DirectoryID
		err := rows.Scan(&did)
		if err != nil {
			return nil, fmt.Errorf("error scanning directory: %w", err)
		}
		parents = append(parents, did)
	}

	if len(parents) == 0 {
		return nil, ErrDirectoryNotFound
	}

	// skip the first element, which is the child
	return parents[1:], nil
}

func (t *APIDBTransformer) GetChildren(ctx context.Context, parent v1.DirectoryID) ([]v1.DirectoryID, error) {
	var children []v1.DirectoryID

	rows, err := t.db.QueryContext(ctx, `WITH RECURSIVE get_children AS (
	SELECT id, parent_id FROM directories WHERE parent_id = $1

	UNION

	SELECT d.id, d.parent_id FROM directories d
	INNER JOIN get_children gc ON d.parent_id = gc.id
)
SELECT id FROM get_children`, parent)
	if err != nil {
		return nil, fmt.Errorf("error querying directory: %w", err)
	}
	defer rows.Close()

	for rows.Next() {
		var did v1.DirectoryID
		err := rows.Scan(&did)
		if err != nil {
			return nil, fmt.Errorf("error scanning directory: %w", err)
		}
		children = append(children, did)
	}

	return children, nil
}
