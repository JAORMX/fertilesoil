// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/jNhD9K8S0R1lysjfd0k1aGNhNgbS3bQ6MNJa4kEjucLROYOi/F6RsS7LkxkYN",
	"FEV7s6n5eG/mcThbyExtjUbNDtItuKzEWoafHwkl470izNjQ2xN+a9Cx/yKr6tc1pF+28CPhGlL4Iemj",
	"JLsQybHnZ2QJbfTXTo+4OfhB+9xG0P89O/M4SLQFS8YiscJALAvE8rvAZW2olgwp5JJxwapGiIDfLEIK",
	"jknpAtoIcqzwQheVe9vxcQSvi8IsdocHjKt772AloQ4JjGVltKwgZWowuiRIY/PLuLUREH5rFGEO6ReP",
	"OhoUaBjw+eBrXr5ixkft+Rk5K6+gjnGv8mH3z4o3odSHeIfBJ3UVec8T2P1VjLW7UBi7U0kkT7Pz8d/h",
	"NwSaHuP8juSU0VNoxwn3htNkETwQGZrGzkyOIz0qzR9uey0qzVgg+Qg1OicLfB9GiNnbz6EZjYEJqBpZ",
	"5rIrxdj1RDM+7x3aCLSscb6LRlq18OAK1At8ZZILlkXI+KJ07s3Snkh7TCsEnpLxZkqvTVdNzTILSu1g",
	"wEqvSbIpSNoSSdw1XBpy/vJSBSmUzDZNkkJx2bzEmakTNXLoBpzLSIW5Ayn8Toi11EI5IUUttSyQxNqQ",
	"ONwlwYToYoigUhlqhwM4d1ZmJYrbeDmC4NIk2Ww2sQyfY0NFsvN1yafVx4fH3x4Wt/EyLrmuguwVV9iD",
	"gajXKCzjZXzjjYxFLa2CFD7ENyGhlVyGcieDq5FsVd76wwJD4cZ0n5Ab0p5rz+9FOsyF0UIKp3RRoVjd",
	"e7peQtL7rXJI4RfkXmJhhMsaGcmF8THOsroXZj2soBEUEoPvLaQBOey11U3iXhrdS9ANn7nb8eyNnTW+",
	"nP777XK5F8vuVZHWVioL2JOvrrvqfbyzRl0344Max9x6VnsQnajWsqn4aji68TKTvtH4ajFjzAX2Nta4",
	"mWZ3a41vtsaNcM3LogdfqO+oBZe+2b5Z/lf3LPd9m2jgaE86TwZzkb0iuqfXi24ETF1RJOER+Mnkb1fr",
	"y4lNcaZRj7iZ4zsh0U7UfPPfVnMbQULGdEv6O0OsUo69xry9GAzB+A89Ea/feZ5C3L85Pw6LzVmlD6vW",
	"dLU52QmF7t82WUbVPzU1fOmHk+Ofv51j2P9f0QuuaNv+GQAA//8oKqhvTg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
